/* Â©Copyright HCL Technologies Ltd. 2018 */
const { ERRORS } = require('../../../strings');
const isDevMode = require('../../../utils/is-dev-mode.js');
const { errorCodes } = require('../../../constants.js');
const DominoDbError = require('../../../domino-db-error.js');

const {
  UNEXPECTED_STATUS_CODE,
  RESPONSE_BODY_MALFORMED,
  UNEXPECTED_RESPONSE_CONTENT_TYPE,
} = ERRORS;

const errorFromString = (message, code) => {
  const error = new Error(message);
  error.name = 'DasApiError';
  error.code = code || error.code;
  return error;
};

const errorFromResponse = response => {
  // Assume generic error message;
  let message = UNEXPECTED_STATUS_CODE + response.statusCode;

  // Get the error message from the JSON body (if possible)
  if (
    response.body &&
    response.headers['content-type'] === 'application/json'
  ) {
    try {
      message = JSON.parse(response.body).message || message;
    } catch (e) {
      message += `\n${RESPONSE_BODY_MALFORMED}${e.message}`;
    }
  }

  return errorFromString(message, response.statusCode);
};

const checkStatusCode = (response, expectedStatusCode) => {
  if (response.statusCode !== expectedStatusCode) {
    throw errorFromResponse(response);
  }
};

const checkJSON = response => {
  // Verify content type before parsing JSON
  if (
    response.headers['content-type'] &&
    response.headers['content-type'] !== 'application/json'
  ) {
    const message =
      UNEXPECTED_RESPONSE_CONTENT_TYPE + response.headers['content-type'];
    throw errorFromString(message);
  }
  return undefined;
};

const testableDasCall = async (
  method,
  rp,
  route = '',
  expectedStatusCode = 200,
  _checkStatusCode,
  _checkJSON,
) => {
  const response = await rp[method](route);
  _checkStatusCode(response, expectedStatusCode);
  _checkJSON(response);
  return response;
};

const dasCall = async (method, rp, route, expectedStatusCode = 200) =>
  testableDasCall(
    method,
    rp,
    route,
    expectedStatusCode,
    checkStatusCode,
    checkJSON,
  );

const headersHelper = (method, options = {}) => {
  const headers = {};
  const { ifModifiedSince, ifUnmodifiedSince } = options;
  if (['post', 'put', 'patch'].includes(method)) {
    headers['content-type'] = 'application/json';
  }
  if (ifModifiedSince) {
    headers['if-modified-since'] = ifModifiedSince;
  }
  if (ifUnmodifiedSince) {
    headers['if-unmodified-since'] = ifUnmodifiedSince;
  }
  return headers;
};

const unidFromLocation = href => {
  let unid;
  const tokens = href ? href.split('/') : undefined;
  if (tokens && tokens.length) {
    unid = tokens[tokens.length - 1];
  }
  return unid;
};

const makeHttpUrl = ({ hostName, protocols }) => {
  let scheme = 'http';
  if (protocols && protocols.http && protocols.http.tlsEnabled) {
    scheme = 'https';
  }
  let host = 'localhost';
  if (hostName) {
    host = hostName;
  }
  let httpUrl = `${scheme}://${host}`;
  if (protocols && protocols.http && protocols.http.port) {
    httpUrl = `${httpUrl}:${protocols.http.port}`;
  }
  return httpUrl;
};

const wrapDasError = dasError => {
  let code;
  if (dasError.name === 'DasApiError') {
    switch (dasError.code) {
      case 304:
        code = errorCodes.NOT_MODIFIED;
        break;
      case 400:
        code = errorCodes.BAD_REQUEST;
        break;
      case 401:
        code = errorCodes.NOT_AUTHORIZED;
        break;
      case 403:
        code = errorCodes.FORBIDDEN;
        break;
      case 404:
        code = errorCodes.NOT_FOUND;
        break;
      case 412:
        code = errorCodes.PRECONDITION_FAILED;
        break;
      default:
        code = errorCodes.INTERNAL_ERROR;
    }
  } else if (dasError.name === 'RequestError') {
    code = errorCodes.NOT_CONNECTED;
  } else {
    code = errorCodes.INTERNAL_ERROR;
  }
  return new DominoDbError(dasError.message, code, dasError);
};

module.exports = {
  dasCall,
  headersHelper,
  unidFromLocation,
  makeHttpUrl,
  wrapDasError,
};

if (isDevMode) {
  module.exports.errorFromString = errorFromString;
  module.exports.errorFromResponse = errorFromResponse;
  module.exports.checkStatusCode = checkStatusCode;
  module.exports.checkJSON = checkJSON;
  module.exports.testableDasCall = testableDasCall;
}
