/* Â©Copyright HCL Technologies Ltd. 2018 */
const databaseRequests = require('./database.js');
const documentRequests = require('./document.js');
const services = require('./generated/domino_grpc_pb.js');
const grpc = require('grpc');
const { makeGrpcHost, base64Encode } = require('./utils/grpc-helpers.js');
const { encryptSecret } = require('./utils/crypto-helpers.js');
const protoSeq = require('./generated/protoseq.js');
const { meta } = require('./generated/pmeta.js');

const makeSslCredentials = credentials =>
  grpc.credentials.createSsl(
    credentials.rootCertificate,
    credentials.clientKey,
    credentials.clientCertificate,
  );

module.exports.configure = ({ hostName, connection, credentials }) => {
  let grpcCredentials = grpc.credentials.createInsecure();
  if (connection && connection.secure) {
    grpcCredentials = makeSslCredentials(credentials);
  }

  const client = new services.ServerClient(
    makeGrpcHost(hostName, connection),
    grpcCredentials,
  );

  const metadata = new grpc.Metadata();
  metadata.add(meta.MDKEY_PROTO_SEQUENCE_NUMBER, `${protoSeq.CURRENT}`);

  // Base64 encode and then encrypt the ID file password. The
  // secrets object will probably be used in the future to store
  // an OAuth access token too
  const secrets = {};
  if (credentials && credentials.idFilePassword) {
    secrets.idFilePassword = encryptSecret(
      base64Encode(credentials.idFilePassword),
    );
  }

  const {
    createDocuments,
    readDocuments,
    readDocumentsByUnid,
    deleteDocuments,
    deleteDocumentsByUnid,
    deleteItems,
    deleteItemsByUnid,
    replaceDocumentsByUnid,
    replaceItems,
    replaceItemsByUnid,
    createSingleDocument,
    explainQuery,
  } = databaseRequests({
    client,
    metadata,
    secrets,
  });

  const {
    readSingleDocument,
    replaceSingleDocumentItems,
    replaceSingleDocument,
    deleteSingleDocument,
    deleteSingleDocumentItems,
  } = documentRequests({
    client,
    metadata,
    secrets,
  });

  return {
    database: {
      createDocuments,
      createSingleDocument,
      explainQuery,
      readDocuments,
      readDocumentsByUnid,
      deleteDocuments,
      deleteDocumentsByUnid,
      deleteItems,
      deleteItemsByUnid,
      replaceDocumentsByUnid,
      replaceItems,
      replaceItemsByUnid,
    },
    document: {
      readSingleDocument,
      replaceSingleDocumentItems,
      replaceSingleDocument,
      deleteSingleDocument,
      deleteSingleDocumentItems,
    },
  };
};
