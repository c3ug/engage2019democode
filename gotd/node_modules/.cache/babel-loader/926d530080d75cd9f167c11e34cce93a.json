{"ast":null,"code":"import _classCallCheck from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdSurveyDisplay.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, fetchResult } from '../../actions';\nimport { reduxForm } from 'redux-form';\nimport Card from 'react-bootstrap/Card';\nimport '../../css/qotd.css';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nvar QotdSurveyDisplay =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QotdSurveyDisplay, _React$Component);\n\n  function QotdSurveyDisplay() {\n    _classCallCheck(this, QotdSurveyDisplay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QotdSurveyDisplay).apply(this, arguments));\n  }\n\n  _createClass(QotdSurveyDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n\n      if (this.props.result.length === 0) {\n        this.props.fetchResult(id);\n      }\n    }\n  }, {\n    key: \"generateResultGraph\",\n    value: function generateResultGraph() {\n      var striping = [\"success\", \"info\", \"warning\", \"danger\", \"success\", \"info\", \"warning\", \"danger\"];\n      var answers = this.props.result;\n      var results = answers.results;\n\n      if (results === undefined) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, \"Loading results...\");\n      } else {\n        return results.map(function (result, key) {\n          var lbl = result.choice + ' ' + result.value;\n          return React.createElement(\"div\", {\n            key: key,\n            className: \"prgressOverride\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }, React.createElement(ProgressBar, {\n            className: \"progressOverride\",\n            striped: true,\n            label: lbl,\n            variant: striping[key],\n            now: result.value,\n            max: answers.total_responses,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var qotd = this.props.qotd;\n      var answers = this.props.result;\n      var qTitle = answers.Text;\n      var qDescr = answers.Description;\n\n      if (qotd.QuestionKey === answers.QuestionKey) {\n        qTitle = qotd.QuestionText;\n        qDescr = qotd.QuestionDescription;\n      }\n\n      console.log(\"----> QOTD:\");\n      console.log(qotd);\n      console.log(\"----> answers:\");\n      console.log(answers); // console.log(this.props.result);\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        as: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Question of the Day\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, qTitle), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, qDescr), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.generateResultGraph()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Total responses: \", this.props.result.total_responses))));\n    }\n  }]);\n\n  return QotdSurveyDisplay;\n}(React.Component);\n\nvar formWrapped = reduxForm({\n  form: 'surveyResult'\n})(QotdSurveyDisplay);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    qotd: state.qotd,\n    questions: Object.values(state.questions),\n    result: state.result,\n    username: state.username.username\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions: fetchQuestions,\n  fetchResult: fetchResult\n})(formWrapped);","map":{"version":3,"sources":["/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdSurveyDisplay.js"],"names":["React","connect","fetchQuestions","fetchResult","reduxForm","Card","ProgressBar","QotdSurveyDisplay","id","props","match","params","result","length","striping","answers","results","undefined","map","key","lbl","choice","value","total_responses","qotd","qTitle","Text","qDescr","Description","QuestionKey","QuestionText","QuestionDescription","console","log","generateResultGraph","Component","formWrapped","form","mapStateToProps","state","questions","Object","values","username"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,eAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;IAEMC,iB;;;;;;;;;;;;;wCAEkB;AAAA,UACRC,EADQ,GACD,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MADhB,CACRH,EADQ;;AAEhB,UAAI,KAAKC,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,aAAKJ,KAAL,CAAWN,WAAX,CAAuBK,EAAvB;AACH;AACJ;;;0CAEqB;AAClB,UAAMM,QAAQ,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,QAA/B,EAAyC,SAAzC,EAAoD,MAApD,EAA4D,SAA5D,EAAuE,QAAvE,CAAjB;AACA,UAAMC,OAAO,GAAG,KAAKN,KAAL,CAAWG,MAA3B;AACA,UAAMI,OAAO,GAAGD,OAAO,CAACC,OAAxB;;AACA,UAAIA,OAAO,KAAKC,SAAhB,EAA2B;AACvB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACH,OAFD,MAEO;AACH,eAAOD,OAAO,CAACE,GAAR,CAAY,UAACN,MAAD,EAASO,GAAT,EAAiB;AAChC,cAAIC,GAAG,GAAGR,MAAM,CAACS,MAAP,GAAgB,GAAhB,GAAsBT,MAAM,CAACU,KAAvC;AAEA,iBAAO;AAAK,YAAA,GAAG,EAAEH,GAAV;AAAe,YAAA,SAAS,EAAC,iBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACH,oBAAC,WAAD;AAAa,YAAA,SAAS,EAAC,kBAAvB;AAA0C,YAAA,OAAO,MAAjD;AAAkD,YAAA,KAAK,EAAEC,GAAzD;AAA8D,YAAA,OAAO,EAAEN,QAAQ,CAACK,GAAD,CAA/E;AAAsF,YAAA,GAAG,EAAEP,MAAM,CAACU,KAAlG;AAAyG,YAAA,GAAG,EAAEP,OAAO,CAACQ,eAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAGH,SANM,CAAP;AAOH;AAEJ;;;6BAEQ;AACL,UAAMC,IAAI,GAAG,KAAKf,KAAL,CAAWe,IAAxB;AACA,UAAMT,OAAO,GAAG,KAAKN,KAAL,CAAWG,MAA3B;AACA,UAAIa,MAAM,GAAGV,OAAO,CAACW,IAArB;AACA,UAAIC,MAAM,GAAGZ,OAAO,CAACa,WAArB;;AACA,UAAGJ,IAAI,CAACK,WAAL,KAAqBd,OAAO,CAACc,WAAhC,EAA6C;AACzCJ,QAAAA,MAAM,GAAGD,IAAI,CAACM,YAAd;AACAH,QAAAA,MAAM,GAAGH,IAAI,CAACO,mBAAd;AACH;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ,EAbK,CAcN;;AAEC,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,MAAN;AAAa,QAAA,EAAE,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaU,MAAb,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAME,MAAN,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKO,mBAAL,EADL,CAJJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyB,KAAKzB,KAAL,CAAWG,MAAX,CAAkBW,eAA3C,CARJ,CAFJ,CAFJ,CADJ;AAkBH;;;;EA7D2BvB,KAAK,CAACmC,S;;AAgEtC,IAAMC,WAAW,GAAGhC,SAAS,CAAC;AAC1BiC,EAAAA,IAAI,EAAE;AADoB,CAAD,CAAT,CAEjB9B,iBAFiB,CAApB;;AAIA,IAAM+B,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AACHf,IAAAA,IAAI,EAAEe,KAAK,CAACf,IADT;AAEHgB,IAAAA,SAAS,EAAEC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACC,SAApB,CAFR;AAGH5B,IAAAA,MAAM,EAAE2B,KAAK,CAAC3B,MAHX;AAIH+B,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAeA;AAJtB,GAAP;AAMH,CAPD;;AASA,eAAe1C,OAAO,CAACqC,eAAD,EAAkB;AAAEpC,EAAAA,cAAc,EAAdA,cAAF;AAAkBC,EAAAA,WAAW,EAAXA;AAAlB,CAAlB,CAAP,CAA0DiC,WAA1D,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, fetchResult } from '../../actions';\nimport { reduxForm } from 'redux-form';\nimport Card from 'react-bootstrap/Card';\nimport '../../css/qotd.css'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass QotdSurveyDisplay extends React.Component {\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        if (this.props.result.length === 0) {\n            this.props.fetchResult(id);\n        }\n    }\n\n    generateResultGraph() {\n        const striping = [\"success\", \"info\", \"warning\", \"danger\", \"success\", \"info\", \"warning\", \"danger\"];\n        const answers = this.props.result;\n        const results = answers.results;\n        if (results === undefined) {\n            return <div>Loading results...</div>;\n        } else {\n            return results.map((result, key) => {\n                let lbl = result.choice + ' ' + result.value;\n\n                return <div key={key} className=\"prgressOverride\">\n                    <ProgressBar className=\"progressOverride\" striped label={lbl} variant={striping[key]} now={result.value} max={answers.total_responses}/>\n                </div>\n            });\n        }\n\n    }\n\n    render() {\n        const qotd = this.props.qotd;\n        const answers = this.props.result;\n        let qTitle = answers.Text;\n        let qDescr = answers.Description;\n        if(qotd.QuestionKey === answers.QuestionKey) {\n            qTitle = qotd.QuestionText;\n            qDescr = qotd.QuestionDescription;\n        } \n\n        console.log(\"----> QOTD:\");\n        console.log(qotd);\n        console.log(\"----> answers:\");\n        console.log(answers);\n       // console.log(this.props.result);\n        \n        return (\n            <div>\n                <br />\n                <Card>\n                    <Card.Header as=\"h5\">Question of the Day</Card.Header>\n                    <Card.Body>\n                        <Card.Title>{qTitle}</Card.Title>\n                        <div>{qDescr}</div>\n                        <br />\n                        <div>\n                            {this.generateResultGraph()}\n                        </div>\n                        <br />\n                        <label>Total responses: {this.props.result.total_responses}</label>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nconst formWrapped = reduxForm({\n    form: 'surveyResult'\n})(QotdSurveyDisplay);\n\nconst mapStateToProps = (state) => {\n    return {\n        qotd: state.qotd,\n        questions: Object.values(state.questions),\n        result: state.result,\n        username: state.username.username\n    }\n};\n\nexport default connect(mapStateToProps, { fetchQuestions, fetchResult })(formWrapped);"]},"metadata":{},"sourceType":"module"}