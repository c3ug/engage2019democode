{"ast":null,"code":"import _classCallCheck from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdSurveyEdit.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { submitQotd } from '../../actions';\nimport history from '../../history';\n\nvar QotdSurveyEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QotdSurveyEdit, _React$Component);\n\n  function QotdSurveyEdit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QotdSurveyEdit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QotdSurveyEdit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderAnswer = function (_ref) {\n      var input = _ref.input,\n          meta = _ref.meta;\n      var choices = _this.props.qotd.QuestionChoices;\n\n      if (choices === undefined) {\n        return React.createElement(\"input\", {\n          type: \"radio\",\n          label: \"error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      } else {\n        return choices.map(function (value, key) {\n          var inputId = 'questionResponse' + key;\n          return React.createElement(\"div\", {\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, React.createElement(\"input\", Object.assign({\n            name: \"answer\",\n            type: \"radio\"\n          }, input, {\n            key: key,\n            id: inputId,\n            value: value,\n            autoComplete: \"off\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          })), React.createElement(\"label\", {\n            htmlFor: inputId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, \"\\xA0\", value));\n        });\n      }\n    };\n\n    _this.onSubmit = function (formValues) {\n      var submitTime = new Date().toLocaleString();\n      var submitData = {\n        'QuestionKey': _this.props.qotd.QuestionKey,\n        'QuestionType': _this.props.qotd.QuestionType,\n        'ResponseAuthor': 'Heiko Voigt/Harbour-Light/CA',\n        'ResponseComment': 'These extra fields are for future flexibility',\n        'ResponseContent': formValues.answer.split(','),\n        'ResponseKey': '',\n        'ReponseStatus': '',\n        'ResponseTimeStamp': submitTime,\n        'ResponseUserName': _this.props.username,\n        'SurveyKey': _this.props.qotd.SurveyKey\n      };\n\n      _this.props.submitQotd(submitData, _this.props.qotd.QuestionKey);\n    };\n\n    return _this;\n  }\n\n  _createClass(QotdSurveyEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // we need the user's login name before showing them the question\n      if (this.props.username === undefined) {\n        history.push(\"/\");\n      }\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"alert alert-danger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"alert alert-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Welcome \", this.props.username)), React.createElement(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Question of the Day\")), React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.qotd.QuestionText), React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.props.qotd.QuestionDescription), React.createElement(Field, {\n        name: \"answer\",\n        component: this.renderAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"card-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return QotdSurveyEdit;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.answer) {\n    errors.answer = 'Please provide an answer before tapping Submit';\n  }\n\n  return errors;\n};\n\nvar formWrapped = reduxForm({\n  form: 'surveyEdit',\n  validate: validate\n})(QotdSurveyEdit);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    qotd: state.qotd,\n    username: state.username.username\n  };\n};\n\nexport default connect(mapStateToProps, {\n  submitQotd: submitQotd\n})(formWrapped);","map":{"version":3,"sources":["/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdSurveyEdit.js"],"names":["React","connect","Field","reduxForm","submitQotd","history","QotdSurveyEdit","renderAnswer","input","meta","choices","props","qotd","QuestionChoices","undefined","map","value","key","inputId","onSubmit","formValues","submitTime","Date","toLocaleString","submitData","QuestionKey","QuestionType","answer","split","username","SurveyKey","push","error","touched","handleSubmit","QuestionText","QuestionDescription","Component","validate","errors","formWrapped","form","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { submitQotd } from '../../actions';\nimport history from '../../history';\n\nclass QotdSurveyEdit extends React.Component {\n    componentDidMount() {\n        // we need the user's login name before showing them the question\n        if (this.props.username === undefined) {\n            history.push(\"/\");\n        }\n    }\n\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div>\n                    <br />\n                    <div className=\"alert alert-danger\">\n                        {error}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    renderAnswer = ({ input, meta }) => {\n        const choices = this.props.qotd.QuestionChoices;\n        if (choices === undefined) {\n            return <input type='radio' label='error'></input>;\n        } else {\n            return choices.map((value, key) => {\n                let inputId='questionResponse' + key;\n                return (\n                    <div key={key}>\n                        <input name=\"answer\" type=\"radio\" {...input} key={key} id={inputId} value={value} autoComplete=\"off\" />\n                        <label htmlFor={inputId}>&nbsp;{value}</label>\n                    </div>\n                );\n            });\n        }\n    }\n\n    onSubmit = (formValues) => {\n        const submitTime = new Date().toLocaleString();\n        const submitData = {\n            'QuestionKey': this.props.qotd.QuestionKey, \n            'QuestionType': this.props.qotd.QuestionType, \n            'ResponseAuthor': 'Heiko Voigt/Harbour-Light/CA',\n            'ResponseComment': 'These extra fields are for future flexibility',\n            'ResponseContent': formValues.answer.split(','),\n            'ResponseKey': '',\n            'ReponseStatus': '',\n            'ResponseTimeStamp': submitTime,\n            'ResponseUserName': this.props.username, \n            'SurveyKey': this.props.qotd.SurveyKey\n        };\n        this.props.submitQotd(submitData, this.props.qotd.QuestionKey);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <br />\n                <div className=\"alert alert-dark\">\n                    <h3>Welcome {this.props.username}</h3>\n                </div>\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                        <h4>Question of the Day</h4>\n                    </div>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{this.props.qotd.QuestionText}</h5>\n                        <p className=\"card-text\">{this.props.qotd.QuestionDescription}</p>\n                        <Field name=\"answer\" component={this.renderAnswer} />\n                    </div>\n                    <div className=\"card-footer\">\n                        <div>\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                        </div>\n                    </div>\n                </div>\n                \n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.answer) {\n        errors.answer = 'Please provide an answer before tapping Submit';\n    }\n\n    return errors;\n};\n\nconst formWrapped = reduxForm({\n    form: 'surveyEdit',\n    validate\n})(QotdSurveyEdit);\n\nconst mapStateToProps = (state) => {\n    return {\n        qotd: state.qotd,\n        username: state.username.username\n    }\n};\n\nexport default connect(mapStateToProps, { submitQotd })(formWrapped);"]},"metadata":{},"sourceType":"module"}