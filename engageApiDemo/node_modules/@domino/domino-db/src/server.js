/* Â©Copyright HCL Technologies Ltd. 2018 */
const deepFreeze = require('deep-freeze');
const databaseFreezeFactory = require('./database.js');
const { ERRORS } = require('./strings');
const getFactoryLib = require('./utils/getter-factory');
const isDevMode = require('./utils/is-dev-mode.js');
const requestLib = require('./requests');
const DominoDbError = require('./domino-db-error.js');
const { errorCodes } = require('./constants.js');

const validateParameters = ({ hostName, connection, credentials }) => {
  if (!(hostName && typeof hostName === 'string')) {
    throw new DominoDbError(
      ERRORS.HOST_NAME_LOCAL_VALIDATION_FAILURE,
      errorCodes.BAD_REQUEST,
    );
  }

  if (connection && typeof connection !== 'object') {
    throw new DominoDbError(
      ERRORS.CONNECTION_LOCAL_VALIDATION_FAILURE,
      errorCodes.BAD_REQUEST,
    );
  }

  if (connection && connection.secure) {
    if (!credentials || typeof credentials !== 'object') {
      throw new DominoDbError(
        ERRORS.CREDENTIALS_LOCAL_VALIDATION_FAILURE,
        errorCodes.BAD_REQUEST,
      );
    }

    if (!credentials.clientKey) {
      throw new DominoDbError(
        ERRORS.CLIENT_KEY_LOCAL_VALIDATION_FAILURE,
        errorCodes.BAD_REQUEST,
      );
    }

    if (!credentials.clientCertificate) {
      throw new DominoDbError(
        ERRORS.CLIENT_CERT_LOCAL_VALIDATION_FAILURE,
        errorCodes.BAD_REQUEST,
      );
    }
  }

  return undefined;
};

/**
 * @protected
 * @class
 * @param configuration
 * @param configuration.hostName {string}: The host name of the
 *   Domino server (ex: "demo.host.com")
 * @param configuration.connection {Object}: The connection which will be
 *   used for requests sent to the Domino server
 * @param configuration.credentials {Object}: The credentials which will be
 *   used for requests sent to the Domino server
 */
class Server {
  constructor({
    configuration: { hostName, connection, credentials },
    getFactory,
    requestLibrary,
  }) {
    this.requestLibrary =
      requestLibrary ||
      requestLib.configure({
        hostName,
        connection,
        credentials,
      });
    /**
     * Getter for the hostName this class was constructed with
     * @type {function}
     * @returns {string} the hostName passed durring construction
     */
    this.getHostName = getFactory(hostName);

    /**
     * Getter for the connection this class was constructed with
     * @type {function}
     * @returns {string} the connection passed durring construction
     */
    this.getConnection = getFactory(connection);

    /*
     * NOTE: There is intentionally no getter for credentials.
     * The credentials object includes a client private key. We
     * pass that on to gRPC, but we don't keep a copy.
     */
  }
}

/**
 * @returns {function} A factory function for instanciating a frozen instance
 * of a server. This server cannot be reconfigured. A new server must be
 * created in order to change configuration parameters.
 */
const serverFreezeFactory = async configuration => {
  validateParameters(configuration);
  const frozenConfiguration = deepFreeze({
    hostName: configuration.hostName,
    connection: configuration.connection,
    // DO NOT freeze credentials!
  });
  const requestLibrary = deepFreeze(
    requestLib.configure({
      hostName: frozenConfiguration.hostName,
      connection: frozenConfiguration.connection,
      credentials: configuration.credentials,
    }),
  );
  const server = new Server({
    configuration: frozenConfiguration,
    requestLibrary,
    getFactory: getFactoryLib,
  });

  /**
   * A factory function of instanciating a frozen instance of a Database.
   * This database cannot be reconfigured. A new database must
   * be created in order ot change configuration paramaters.
   * @param {Object} config
   * @param {string} config.filePath The path to the database
   */
  server.useDatabase = async config =>
    databaseFreezeFactory({
      configuration: config,
      server,
    });

  return deepFreeze(server);
};

module.exports = serverFreezeFactory;

if (isDevMode) {
  module.exports.testExports = {
    Server,
    validateParameters,
  };
}
