/* Â©Copyright HCL Technologies Ltd. 2018 */
const deepFreeze = require('deep-freeze');
const Promise = require('bluebird');
const getFactoryLib = require('./utils/getter-factory.js');
const isDevMode = require('./utils/is-dev-mode.js');
const { ERRORS } = require('./strings');
const documentFreezeFactory = require('./document.js');
const DominoDbError = require('./domino-db-error.js');
const { errorCodes } = require('./constants.js');

const validateParameters = ({ filePath }) => {
  if (!(filePath && typeof filePath === 'string')) {
    throw new DominoDbError(
      ERRORS.NAME_LOCAL_VALIDATION_FAILURE,
      errorCodes.BAD_REQUEST,
    );
  }
};

/**
 * @protected
 * @class
 * @param {Object} configuration
 * @param {string} configuration.filePath The path to the database
 */
class Database {
  constructor({ configuration: { filePath }, server, getFactory }) {
    // Async getter methods. Async to allow for async behavior in the future.
    this.getServer = getFactory(server);
    this.getFilePath = getFactory(filePath);

    let databaseRequestLibraryPromise;
    if (server.requestLibrary.database) {
      databaseRequestLibraryPromise = Promise.resolve(
        server.requestLibrary.database,
      );
    } else {
      databaseRequestLibraryPromise = Promise.props({
        hostName: server.getHostName(),
        connection: server.getConnection(),
      }).then(config => server.requestLibrary.configure(config).database);
    }

    const commonRequestParameters = [filePath];

    this.createDocument = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.createDocument(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.explainQuery = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.explainQuery(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkReadDocuments = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkReadDocuments(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkReadDocumentsByUnid = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkReadDocumentsByUnid(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkCreateDocuments = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkCreateDocuments(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkDeleteDocuments = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkDeleteDocuments(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkDeleteDocumentsByUnid = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkDeleteDocumentsByUnid(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkDeleteItems = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkDeleteItems(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkDeleteItemsByUnid = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkDeleteItemsByUnid(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkReplaceDocumentsByUnid = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkReplaceDocumentsByUnid(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkReplaceItems = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkReplaceItems(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.bulkReplaceItemsByUnid = async options =>
      databaseRequestLibraryPromise.then(databaseRequestLibrary =>
        databaseRequestLibrary.bulkReplaceItemsByUnid(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
  }
}

const databaseFreezeFactory = async ({ configuration, server }) => {
  validateParameters(configuration);
  const frozenConfiguration = deepFreeze(configuration);
  const database = new Database({
    configuration: frozenConfiguration,
    server,
    getFactory: getFactoryLib,
  });

  /**
   * A factory function of instanciating a frozen instance of a Document.
   * This Document cannot be reconfigured. A new Document must
   * be created in order ot change configuration paramaters.
   *
   * Document Class instance can be used to perform operations related
   * to this document
   */
  database.useDocument = async options =>
    documentFreezeFactory({
      configuration: options,
      database,
    });

  return deepFreeze(database);
};

/**
 * @returns {function} A factory function for instanciating a frozen instance
 * of a server. This server cannot be reconfigured. A new server must be
 * created in order to change configuration parameters.
 */
module.exports = databaseFreezeFactory;

if (isDevMode) {
  module.exports.testExports = {
    Database,
    validateParameters,
  };
}
