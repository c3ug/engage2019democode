/* Â©Copyright HCL Technologies Ltd. 2018 */
const deepFreeze = require('deep-freeze');
const Promise = require('bluebird');
const getterFactory = require('./utils/getter-factory.js');
const isDevMode = require('./utils/is-dev-mode.js');
const { ERRORS } = require('./strings');
const DominoDbError = require('./domino-db-error.js');
const { errorCodes } = require('./constants.js');

const validateParameters = ({ unid }) => {
  if (!unid || typeof unid !== 'string') {
    throw new DominoDbError(
      ERRORS.UNID_LOCAL_VALIDATION_FAILURE,
      errorCodes.BAD_REQUEST,
    );
  }
};

/**
 * @protected
 * @class
 * @param {Object} configuration
 * @param {string} configuration.name The name of the document.
 *  Required if unid is not specified.
 * @param {strign} configuration.unid The unid of the document.
 *  Required if name is not specified.
 *  NOTE: unid will be used if both name and unid are specified.
 */
class Document {
  constructor({ configuration: { unid }, database, getFactory }) {
    /**
     * Getter functions
     */
    this.getDatabase = getFactory(database);
    this.getUnid = getFactory(unid);

    // eslint-disable-next-line
    const documentRequestLibaryPromise = database.getServer().then(server => {
      return (
        server.requestLibrary.document ||
        Promise.props({
          hostName: server.getHostName(),
          connection: server.getConnection(),
        }).then(config => server.requestLibrary.configure(config).document)
      );
    });

    const commonRequestParameters = [database, unid];

    this.read = async options =>
      documentRequestLibaryPromise.then(documentRequestLibrary =>
        documentRequestLibrary.read(...commonRequestParameters, options),
      ); // eslint-disable-line
    this.replaceItems = async options =>
      documentRequestLibaryPromise.then(documentRequestLibrary =>
        documentRequestLibrary.replaceItems(
          ...commonRequestParameters,
          options,
        ),
      ); // eslint-disable-line
    this.replace = async options =>
      documentRequestLibaryPromise.then(documentRequestLibrary =>
        documentRequestLibrary.replace(...commonRequestParameters, options),
      ); // eslint-disable-line
    this.delete = async options =>
      documentRequestLibaryPromise.then(documentRequestLibrary =>
        documentRequestLibrary.delete(...commonRequestParameters, options),
      ); // eslint-disable-line
    this.deleteItems = async options =>
      documentRequestLibaryPromise.then(documentRequestLibrary =>
        documentRequestLibrary.deleteItems(...commonRequestParameters, options),
      ); // eslint-disable-line
  }
}

const documentFreezeFactory = async ({ configuration, database }) => {
  validateParameters(configuration);
  const frozenConfiguration = deepFreeze(configuration);
  const document = new Document({
    configuration: frozenConfiguration,
    database,
    getFactory: getterFactory,
  });

  return deepFreeze(document);
};

module.exports = documentFreezeFactory;

if (isDevMode) {
  module.exports.testExports = {
    Document,
    validateParameters,
  };
}
