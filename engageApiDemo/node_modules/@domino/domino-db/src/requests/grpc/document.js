/* Â©Copyright HCL Technologies Ltd. 2018 */
const protoConverters = require('./utils/convert-to-proto.js');

const {
  getBulkDocumentRequest,
  executeBulkDocumentRequest,
} = require('./utils/bulk-document.js');

const {
  singleDocumentConverter,
  readSingleDocumentConverter,
} = require('./utils/convert-from-proto.js');

const {
  documentListProtoFromDocumentArray,
  documentListProtoFromUnidArray,
} = protoConverters;

module.exports = ({ client, metadata, secrets }) => {
  const readSingleDocument = (database, unid, options) =>
    database.getFilePath().then(dbFilePath => {
      const unids = [unid];
      const documentListProto = documentListProtoFromUnidArray(unids);
      const bulkDeleteRequestConfig = {
        dbFilePath,
        options,
        documentListProto,
        reqFunctionType: 'READ_NOTE',
      };
      const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
      return executeBulkDocumentRequest(
        bulkDeleteReq,
        metadata,
        secrets,
        client,
        readSingleDocumentConverter,
      );
    });

  const replaceSingleDocumentItems = (database, unid, options) =>
    database.getFilePath().then(dbFilePath => {
      const documents = [
        {
          ...options.replaceItems,
          '@unid': unid,
        },
      ];
      const documentListProto = documentListProtoFromDocumentArray(documents);
      const bulkDeleteRequestConfig = {
        dbFilePath,
        options,
        documentListProto,
        reqFunctionType: 'REPLACE_ITEM',
      };
      const bulkReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
      return executeBulkDocumentRequest(
        bulkReq,
        metadata,
        secrets,
        client,
        singleDocumentConverter,
      );
    });

  const replaceSingleDocument = (database, unid, options) =>
    database.getFilePath().then(dbFilePath => {
      const documents = [
        {
          ...options.document,
          '@unid': unid,
        },
      ];
      const documentListProto = documentListProtoFromDocumentArray(documents);
      const bulkDeleteRequestConfig = {
        dbFilePath,
        options,
        documentListProto,
        reqFunctionType: 'REPLACE_NOTE',
      };
      const bulkReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
      return executeBulkDocumentRequest(
        bulkReq,
        metadata,
        secrets,
        client,
        singleDocumentConverter,
      );
    });

  const deleteSingleDocument = (database, unid) =>
    database.getFilePath().then(dbFilePath => {
      const unids = [unid];
      const options = {};
      const documentListProto = documentListProtoFromUnidArray(unids);
      const bulkDeleteRequestConfig = {
        dbFilePath,
        options,
        documentListProto,
        reqFunctionType: 'DELETE_NOTE',
      };
      const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
      return executeBulkDocumentRequest(
        bulkDeleteReq,
        metadata,
        secrets,
        client,
        singleDocumentConverter,
      );
    });

  const deleteSingleDocumentItems = (database, unid, options) =>
    database.getFilePath().then(dbFilePath => {
      const unids = [unid];
      const documentListProto = documentListProtoFromUnidArray(unids);
      const bulkDeleteRequestConfig = {
        dbFilePath,
        options,
        documentListProto,
        reqFunctionType: 'DELETE_ITEM',
      };
      const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
      return executeBulkDocumentRequest(
        bulkDeleteReq,
        metadata,
        secrets,
        client,
        singleDocumentConverter,
      );
    });

  return {
    readSingleDocument: (...rest) => readSingleDocument(...rest),
    replaceSingleDocumentItems: (...rest) =>
      replaceSingleDocumentItems(...rest),
    replaceSingleDocument: (...rest) => replaceSingleDocument(...rest),
    deleteSingleDocument: (...rest) => deleteSingleDocument(...rest),
    deleteSingleDocumentItems: (...rest) => deleteSingleDocumentItems(...rest),
  };
};
