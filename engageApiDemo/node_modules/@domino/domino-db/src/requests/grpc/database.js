/* Â©Copyright HCL Technologies Ltd. 2018 */
const protoConverters = require('./utils/convert-to-proto.js');
const DominoDbError = require('../../domino-db-error.js');
const { ERRORS } = require('../../strings');
const { errorCodes } = require('../../constants.js');

const {
  verifyQuery,
  getBulkDocumentRequest,
  executeBulkDocumentRequest,
} = require('./utils/bulk-document.js');

const {
  readResponseFromProto,
  createResponseFromProto,
  commonResponseFromProto,
  createSingleDocumentConverter,
  explainQueryConverter,
} = require('./utils/convert-from-proto.js');

const {
  documentListProtoFromDocumentArray,
  documentListProtoFromUnidArray,
  itemListProtoFromDocument,
} = protoConverters;

module.exports = ({ client, metadata, secrets }) => {
  const createDocuments = (dbFilePath, options) => {
    const { documents } = options;
    const documentListProto = documentListProtoFromDocumentArray(documents);
    const bulkCreateRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'CREATE_NOTE',
    };
    const bulkCreateRequest = getBulkDocumentRequest(bulkCreateRequestConfig);
    return executeBulkDocumentRequest(
      bulkCreateRequest,
      metadata,
      secrets,
      client,
      createResponseFromProto,
    );
  };

  const explainQuery = (dbFilePath, options) => {
    verifyQuery(options);
    const bulkReadRequestConfig = {
      dbFilePath,
      options,
      undefined,
      reqFunctionType: 'READ_NOTE',
    };
    const bulkReadRequest = getBulkDocumentRequest(bulkReadRequestConfig);
    const search = bulkReadRequest.getNoteSearch();
    search.setExplain(true);
    return executeBulkDocumentRequest(
      bulkReadRequest,
      metadata,
      secrets,
      client,
      explainQueryConverter,
    );
  };

  const readDocuments = (dbFilePath, options) => {
    verifyQuery(options);
    const bulkReadRequestConfig = {
      dbFilePath,
      options,
      undefined,
      reqFunctionType: 'READ_NOTE',
    };
    const bulkReadRequest = getBulkDocumentRequest(bulkReadRequestConfig);
    return executeBulkDocumentRequest(
      bulkReadRequest,
      metadata,
      secrets,
      client,
      readResponseFromProto,
    );
  };

  const readDocumentsByUnid = (dbFilePath, options) => {
    const { unids } = options;
    const documentListProto = documentListProtoFromUnidArray(unids);
    const bulkReadRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'READ_NOTE',
    };
    const bulkReadRequest = getBulkDocumentRequest(bulkReadRequestConfig);
    return executeBulkDocumentRequest(
      bulkReadRequest,
      metadata,
      secrets,
      client,
      readResponseFromProto,
    );
  };

  const deleteDocuments = (dbFilePath, options) => {
    verifyQuery(options);
    const bulkDeleteRequestConfig = {
      dbFilePath,
      options,
      undefined,
      reqFunctionType: 'DELETE_NOTE',
    };
    const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
    return executeBulkDocumentRequest(
      bulkDeleteReq,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const deleteDocumentsByUnid = (dbFilePath, options) => {
    const { unids } = options;
    const documentListProto = documentListProtoFromUnidArray(unids);
    const bulkDeleteRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'DELETE_NOTE',
    };
    const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
    return executeBulkDocumentRequest(
      bulkDeleteReq,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const deleteItems = (dbFilePath, options) => {
    verifyQuery(options);
    const bulkDeleteRequestConfig = {
      dbFilePath,
      options,
      undefined,
      reqFunctionType: 'DELETE_ITEM',
    };
    const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
    return executeBulkDocumentRequest(
      bulkDeleteReq,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const deleteItemsByUnid = (dbFilePath, options) => {
    const { unids } = options;
    const documentListProto = documentListProtoFromUnidArray(unids);
    const bulkDeleteRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'DELETE_ITEM',
    };
    const bulkDeleteReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
    return executeBulkDocumentRequest(
      bulkDeleteReq,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const replaceDocumentsByUnid = (dbFilePath, options) => {
    const { documents } = options;
    const documentListProto = documentListProtoFromDocumentArray(documents);
    const bulkDeleteRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'REPLACE_NOTE',
    };
    const bulkReq = getBulkDocumentRequest(bulkDeleteRequestConfig);
    return executeBulkDocumentRequest(
      bulkReq,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const replaceItems = (dbFilePath, options) => {
    verifyQuery(options);
    const bulkReplaceItemsRequestConfig = {
      dbFilePath,
      options,
      undefined,
      reqFunctionType: 'REPLACE_ITEM',
    };
    const bulkReplaceItemsRequest = getBulkDocumentRequest(
      bulkReplaceItemsRequestConfig,
    );
    if (options.replaceItems) {
      bulkReplaceItemsRequest.setItemList(
        itemListProtoFromDocument(options.replaceItems),
      );
    }
    return executeBulkDocumentRequest(
      bulkReplaceItemsRequest,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const replaceItemsByUnid = (dbFilePath, options) => {
    if (!options.replaceItemsByUnid) {
      throw new DominoDbError(
        ERRORS.BULK_ITEM_REPLACE_NO_UNIDS,
        errorCodes.BAD_REQUEST,
      );
    }
    const documentListProto = documentListProtoFromDocumentArray(
      // Document specific updates (update NOT for all documents)
      options.replaceItemsByUnid,
    );
    const bulkReplaceItemsRequestConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'REPLACE_ITEM',
    };
    const bulkReplaceItemsRequest = getBulkDocumentRequest(
      bulkReplaceItemsRequestConfig,
    );
    if (options.replaceItems) {
      bulkReplaceItemsRequest.setItemList(
        itemListProtoFromDocument(options.replaceItems),
      );
    }
    return executeBulkDocumentRequest(
      bulkReplaceItemsRequest,
      metadata,
      secrets,
      client,
      commonResponseFromProto,
    );
  };

  const createSingleDocument = (dbFilePath, options) => {
    const documents = [options.document];
    const documentListProto = documentListProtoFromDocumentArray(documents);
    const bulkCreateConfig = {
      dbFilePath,
      options,
      documentListProto,
      reqFunctionType: 'CREATE_NOTE',
    };
    const bulkCreateRequest = getBulkDocumentRequest(bulkCreateConfig);
    return executeBulkDocumentRequest(
      bulkCreateRequest,
      metadata,
      secrets,
      client,
      createSingleDocumentConverter,
    );
  };

  return {
    createDocuments: (...rest) => createDocuments(...rest),
    explainQuery: (...rest) => explainQuery(...rest),
    readDocuments: (...rest) => readDocuments(...rest),
    readDocumentsByUnid: (...rest) => readDocumentsByUnid(...rest),
    deleteDocuments: (...rest) => deleteDocuments(...rest),
    deleteDocumentsByUnid: (...rest) => deleteDocumentsByUnid(...rest),
    deleteItems: (...rest) => deleteItems(...rest),
    deleteItemsByUnid: (...rest) => deleteItemsByUnid(...rest),
    replaceItems: (...rest) => replaceItems(...rest),
    replaceItemsByUnid: (...rest) => replaceItemsByUnid(...rest),
    replaceDocumentsByUnid: (...rest) => replaceDocumentsByUnid(...rest),
    createSingleDocument: (...rest) => createSingleDocument(...rest),
  };
};
