{"ast":null,"code":"import _classCallCheck from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hvoigt/Documents/GitHub/qotd/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form';\nimport { fetchResult, fetchQuestions, login } from '../../actions';\n\nvar QotdList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QotdList, _React$Component);\n\n  function QotdList() {\n    _classCallCheck(this, QotdList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QotdList).apply(this, arguments));\n  }\n\n  _createClass(QotdList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //console.log(this.props);\n      this.props.fetchQuestions();\n    }\n  }, {\n    key: \"fetchResults\",\n    value: function fetchResults(questionKey) {\n      this.props.fetchResult(questionKey);\n    }\n  }, {\n    key: \"renderList\",\n    value: function renderList() {\n      var _this = this;\n\n      return this.props.questions.map(function (question) {\n        console.log(question);\n        return React.createElement(\"div\", {\n          className: \"alert alert-secondary\",\n          key: question.QuestionKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-9\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, question.QuestionText), React.createElement(\"div\", {\n          className: \"col-sm-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: function onClick() {\n            _this.fetchResults(question.QuestionKey, question.QuestionText, question.QuestionDescription);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, \"View Results\"))));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Previous Questions\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.renderList()));\n    }\n  }]);\n\n  return QotdList;\n}(React.Component);\n\nvar formWrapped = reduxForm({\n  form: 'surveyList'\n})(QotdList);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    questions: Object.values(state.questions),\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchResult: fetchResult,\n  fetchQuestions: fetchQuestions,\n  login: login\n})(formWrapped);","map":{"version":3,"sources":["/Users/hvoigt/Documents/GitHub/qotd/src/components/qotd/QotdList.js"],"names":["React","connect","reduxForm","fetchResult","fetchQuestions","login","QotdList","props","questionKey","questions","map","question","console","log","QuestionKey","QuestionText","fetchResults","QuestionDescription","renderList","Component","formWrapped","form","mapStateToProps","state","Object","values","token"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,KAAtC,QAAmD,eAAnD;;IAEMC,Q;;;;;;;;;;;;;wCACkB;AAChB;AACA,WAAKC,KAAL,CAAWH,cAAX;AACH;;;iCAEYI,W,EAAa;AACtB,WAAKD,KAAL,CAAWJ,WAAX,CAAuBK,WAAvB;AACH;;;iCAEY;AAAA;;AACT,aAAO,KAAKD,KAAL,CAAWE,SAAX,CAAqBC,GAArB,CAAyB,UAAAC,QAAQ,EAAI;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,eACI;AAAK,UAAA,SAAS,EAAC,uBAAf;AAAuC,UAAA,GAAG,EAAEA,QAAQ,CAACG,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKH,QAAQ,CAACI,YADd,CADJ,EAII;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,iBAAhC;AAAkD,UAAA,OAAO,EAAE,mBAAM;AAE7D,YAAA,KAAI,CAACC,YAAL,CAAkBL,QAAQ,CAACG,WAA3B,EAAwCH,QAAQ,CAACI,YAAjD,EAA+DJ,QAAQ,CAACM,mBAAxE;AACC,WAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAJJ,CADJ,CADJ;AAgBH,OAlBM,CAAP;AAmBH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKC,UAAL,EAAN,CAFJ,CADJ;AAMH;;;;EAvCkBlB,KAAK,CAACmB,S;;AA0C7B,IAAMC,WAAW,GAAGlB,SAAS,CAAC;AAC1BmB,EAAAA,IAAI,EAAE;AADoB,CAAD,CAAT,CAEjBf,QAFiB,CAApB;;AAIA,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAO;AACHd,IAAAA,SAAS,EAAEe,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACd,SAApB,CADR;AAEHiB,IAAAA,KAAK,EAAEH,KAAK,CAACG;AAFV,GAAP;AAIH,CALD;;AAOA,eAAezB,OAAO,CAACqB,eAAD,EAAkB;AAAEnB,EAAAA,WAAW,EAAXA,WAAF;AAAeC,EAAAA,cAAc,EAAdA,cAAf;AAA+BC,EAAAA,KAAK,EAALA;AAA/B,CAAlB,CAAP,CAAiEe,WAAjE,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form';\nimport { fetchResult, fetchQuestions, login } from '../../actions';\n\nclass QotdList extends React.Component {\n    componentDidMount() {\n        //console.log(this.props);\n        this.props.fetchQuestions();\n    }\n\n    fetchResults(questionKey) {\n        this.props.fetchResult(questionKey);\n    }\n\n    renderList() {\n        return this.props.questions.map(question => {\n            console.log(question);\n            return (\n                <div className=\"alert alert-secondary\" key={question.QuestionKey}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-9\">\n                            {question.QuestionText}\n                        </div>\n                        <div className=\"col-sm-3\" >\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => {\n\n                                this.fetchResults(question.QuestionKey, question.QuestionText, question.QuestionDescription);\n                                }}\n                            >View Results</button>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>Previous Questions</h2>\n                <div>{this.renderList()}</div>\n            </div>\n        );\n    }\n}\n\nconst formWrapped = reduxForm({\n    form: 'surveyList'\n})(QotdList);\n\nconst mapStateToProps = (state) => {\n    return {\n        questions: Object.values(state.questions),\n        token: state.token\n    }\n};\n\nexport default connect(mapStateToProps, { fetchResult, fetchQuestions, login })(formWrapped);"]},"metadata":{},"sourceType":"module"}